# Напишите функцию segment
# На вход подается два кортежа с координатами точек (x1, y1), (x2, y2)

# В функции происходит проверка на корректность полученных данных.
# С помощью инструкции try/except as отлавливается исключение Exception. И если это исключение поймано,
# то функция возвращает текст исключения задом наперед (Нужно обратится к атрибуту экземпляра класса Exception)
# Если исключения не произошло, то функция возвращает сумму всех координат


# Здесь пишем код
def segment(x1y1, x2y2):
    """
    В функции происходит проверка на корректность полученных данных.
    :param x1y1: Кортеж с координатами точек.
    :param x2y2: Кортеж с координатами точек.
    """
    # Создаем отдельные переменные для последующей их проверки
    x1, y1 = x1y1
    x2, y2 = x2y2
    # Если данные корректные, то функция возвращает сумму всех координат
    try:
        return x1 + y1 + x2 + y2
    # Отлавливается исключение Exception.
    # Функция возвращает текст исключения задом наперед
    except Exception as error:
        error = str(error)[::-1]
        return error


# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


data = [
    ((2, 3), (4, 5)),
    ((2, -3), (4, 5)),
    ((2, 3), ('4', 5)),
    (('a', 3), (4, 5)),
]

test_data = [
    14,
    8,
    "'rts' dna 'tni' :+ rof )s(epyt dnarepo detroppusnu",
    'rts ot )"tni" ton( rts etanetacnoc ylno nac']


for i, d in enumerate(data):
    assert segment(*d) == test_data[i], f'С набором {d} есть ошибка, не проходит проверку'
    print(f'Тестовый набор {d} прошёл проверку')
print('Всё ок')
